#### PACKAGES ####
library(phytools)
library(doSNOW)
library(viridis)
source("functions.R")
#### LOAD DATA ####
dat <- read.csv("../data/chromes/dat.csv",
as.is=T)[,c(1,4)]
tree <- read.tree("../data/trees/tree.nex")
mat <- as.matrix(read.csv("../data/transition_matrix/transition_matrix_SAF.csv",
as.is=T,header = T))
Qmat <- as.matrix(read.csv("../data/transition_matrix/Q_matrix_SAF.csv",
as.is=T,header=T))
plot(tree,cex=0.1,edge.width = 0.1)
edgelabels(cex=0.1,frame="none")
#### LOAD PACKAGES ####
library(phytools)
library(chromePlus)
library(diversitree)
#### LOAD DATA ####
dat <- read.csv("../data/chromes/dat.csv",
as.is=T)[,c(1,3)]
tree <- force.ultrametric(read.tree("../data/trees/tree.nex"))
#### MODEL ####
#Convert to data matrix
data.matrix <- datatoMatrix(dat,
c(2,50),
hyper = F)
#Make mkn model
model <- make.mkn(tree,
data.matrix,
ncol(data.matrix),
strict=F,
control=list(method="ode"))
#constrain model
model.con <- constrainMkn(data.matrix,
model,
hyper = F,
polyploidy = F,
verbose = T,
constrain = list(drop.poly=T,
drop.demi=T))
#run MCMC
model.mcmc <- diversitree::mcmc(lik=model.con$`likelihood function`,
x.init=c(1,1),
prior=make.prior.exponential(r=2),
#upper=c(100,100,100,100),
nsteps = 500,
w=1)
model.mcmc <- diversitree::mcmc(lik=model.con$`likelihood function`,
x.init=c(1,1),
prior=make.prior.exponential(r=0.5),
#upper=c(100,100,100,100),
nsteps = 500,
w=1)
model.mcmc <- diversitree::mcmc(lik=model.con$`likelihood function`,
x.init=c(1,1),
prior=make.prior.exponential(r=0.5),
#upper=c(100,100,100,100),
nsteps = 500,
w=1)
#convert to numeric
model.con$`parameter matrix`
#Extract post burn portion
model.mcmc.postburn <- model.mcmc[450:500,]
#Get mean params
params <- c(mean(model.mcmc.postburn$SAF),
mean(model.mcmc.postburn$Ro))
names(params) <- colnames(model.mcmc[,2:3])
#Sub into matrix
parMat <- model.con$`parameter matrix`
parMat[parMat == "asc1"] <- params[1]
parMat[parMat == "desc1"] <- params[2]
#convert to numeric
parMat <- as.data.frame(parMat)
parMat <- sapply(parMat[,1:ncol(parMat)],as.numeric)
model.mcmc.postburn <- model.mcmc[450:500,]
#Get mean params
params <- c(mean(model.mcmc.postburn$asc1),
mean(model.mcmc.postburn$desc1))
names(params) <- colnames(model.mcmc[,2:3])
#Sub into matrix
parMat <- model.con$`parameter matrix`
parMat[parMat == "asc1"] <- params[1]
parMat[parMat == "desc1"] <- params[2]
#convert to numeric
parMat <- as.data.frame(parMat)
parMat <- sapply(parMat[,1:ncol(parMat)],as.numeric)
#calculate diagonal
diag(parMat) <- -rowSums(parMat)
parMat
parMat <- model.con$`parameter matrix`
mat <- parMat
parMat <- model.con$`parameter matrix`
mat <- parMat
parMat[parMat == "asc1"] <- params[1]
parMat[parMat == "desc1"] <- params[2]
mat[mat == "asc1"] <- 1
mat[mat == "desc1"] <- 2
mat
parMat <- as.data.frame(parMat)
mat <- as.data.frame(mat)
parMat <- sapply(parMat[,1:ncol(parMat)],as.numeric)
mat <- sapply(mat[,1:ncol(mat)],as.numeric)
mat
parMat
write.csv(parMat,
paste0("../data/transition_matrix/Q_matrix_hapauto.csv"),
row.names=F,quote=F)
write.csv(mat,
paste0("../data/transition_matrix/transition_matrix_hapauto.csv"),
row.names=F,quote=F)
#### PACKAGES ####
library(phytools)
library(doSNOW)
library(viridis)
source("functions.R")
#### LOAD DATA ####
dat <- read.csv("../data/chromes/dat.csv",
as.is=T)[,c(1,3)]
tree <- read.tree("../data/trees/tree.nex")
mat <- as.matrix(read.csv("../data/transition_matrix/transition_matrix_hapauto.csv",
as.is=T,header = T))
Qmat <- as.matrix(read.csv("../data/transition_matrix/Q_matrix_hapauto.csv",
as.is=T,header=T))
View(dat)
data.matrix <- matrix(0,nrow=nrow(dat),
ncol=max(dat$hapauto) - 1)
as.character(2:50)
colnames(data.matrix) <- as.character(2:50)
rownames(data.matrix) <- dat$tree.name
for(i in 1:nrow(data.matrix)){
data.matrix[i,as.numeric(dat$hapauto[i]) - 1] <- 1
}
View(data.matrix)
mat
#column and rownames for mat/Qmat
rownames(mat) <- as.character(2:50)
colnames(mat) <- as.character(2:50)
rownames(Qmat) <- as.character(2:50)
colnames(Qmat) <- as.character(2:50)
View(mat)
hists <- make.simmap2(tree = tree,
x = data.matrix,
model = mat,
nsim = 100,
Q = Qmat,
rejmax = 1000000,
rejint = 100000,
pi=fitzjohn,
monitor=T)
hists <- make.simmap2(tree = tree,
x = data.matrix,
model = mat,
nsim = 100,
Q = Qmat,
rejmax = 1000000,
rejint = 100000,
pi="fitzjohn",
monitor=T)
View(Qmat)
diag(parMat) <- -rowSums(parMat)
parMat <- Qmat
diag(parMat)
diag(parMat) <- -rowSums(parMat)
write.csv(parMat,
paste0("../data/transition_matrix/Q_matrix_hapauto.csv"),
row.names=F,quote=F)
#### PACKAGES ####
library(phytools)
library(doSNOW)
library(viridis)
source("functions.R")
#### LOAD DATA ####
dat <- read.csv("../data/chromes/dat.csv",
as.is=T)[,c(1,3)]
tree <- read.tree("../data/trees/tree.nex")
mat <- as.matrix(read.csv("../data/transition_matrix/transition_matrix_hapauto.csv",
as.is=T,header = T))
Qmat <- as.matrix(read.csv("../data/transition_matrix/Q_matrix_hapauto.csv",
as.is=T,header=T))
View(Qmat)
#### BUILD DATA MATRIX ####
#data.matrix
data.matrix <- matrix(0,nrow=nrow(dat),
ncol=max(dat$hapauto) - 1)
colnames(data.matrix) <- as.character(2:50)
rownames(data.matrix) <- dat$tree.name
#fill data matrix
for(i in 1:nrow(data.matrix)){
data.matrix[i,as.numeric(dat$hapauto[i]) - 1] <- 1
}
#column and rownames for mat/Qmat
rownames(mat) <- as.character(2:50)
colnames(mat) <- as.character(2:50)
rownames(Qmat) <- as.character(2:50)
colnames(Qmat) <- as.character(2:50)
#### STOCHASTIC MAPPING ####
hists <- make.simmap2(tree = tree,
x = data.matrix,
model = mat,
nsim = 100,
Q = Qmat,
rejmax = 1000000,
rejint = 100000,
pi="fitzjohn",
monitor=T)
View(data.matrix)
hists <- make.simmap2(tree = tree,
x = data.matrix,
model = mat,
nsim = 100,
Q = Qmat,
rejmax = 1000000,
rejint = 100000,
pi="fitzjohn",
monitor=T)
hists <- make.simmap2(tree = tree,
x = data.matrix,
model = mat,
nsim = 100,
Q = Qmat,
rejmax = 1000000,
rejint = 1,
pi="fitzjohn",
monitor=T)
#### PACKAGES ####
library(phytools)
library(doSNOW)
library(viridis)
source("functions.R")
#### LOAD DATA ####
dat <- read.csv("../data/chromes/dat.csv",
as.is=T)[,c(1,3)]
tree <- read.tree("../data/trees/tree.nex")
mat <- as.matrix(read.csv("../data/transition_matrix/transition_matrix_hapauto.csv",
as.is=T,header = T))
Qmat <- as.matrix(read.csv("../data/transition_matrix/Q_matrix_hapauto.csv",
as.is=T,header=T))
#### BUILD DATA MATRIX ####
#data.matrix
data.matrix <- matrix(0,nrow=nrow(dat),
ncol=max(dat$hapauto) - 1)
colnames(data.matrix) <- 1:49
rownames(data.matrix) <- dat$tree.name
#fill data matrix
for(i in 1:nrow(data.matrix)){
data.matrix[i,as.numeric(dat$hapauto[i]) - 1] <- 1
}
#column and rownames for mat/Qmat
rownames(mat) <- 1:49
colnames(mat) <- 1:49
rownames(Qmat) <- 1:49
colnames(Qmat) <- 1:49
hists <- make.simmap2(tree = tree,
x = data.matrix,
model = mat,
nsim = 100,
Q = Qmat,
rejmax = 1000000,
rejint = 1000,
pi="fitzjohn",
monitor=T)
hists <- make.simmap2(tree = tree,
x = data.matrix,
model = mat,
nsim = 100,
Q = Qmat,
rejmax = 1000000,
rejint = 100000,
pi="fitzjohn",
monitor=T)
View(hists)
View(mat)
hists.fixed <- fix.simmap(hists,dat,mat)
View(dat)
View(data.matrix)
View(data.matrix)
#### FIX STOCHASTIC MAPS ####
dat$sim.state <- dat$hapauto - 1
View(dat)
dat.for.fixing <- dat[,-2]
View(dat.for.fixing)
hists.fixed <- fix.simmap(hists,dat.for.fixing,mat)
View(hists.fixed)
save(hists.fixed, file = "../outputs/hapauto_maps/hists.fixed.RData")
save(hists, file="../outputs/hapauto_maps/hists.RData")
#### SUMMARIZE STOCHASTIC MAPS ####
hists.summarized <- describe.simmap2(hists.fixed)
hists.summarized$times
save(hists.summarized, file = "../outputs/hapauto_maps/hists.summarized.RData")
