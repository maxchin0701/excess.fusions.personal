hists.summarized <- describe.simmap2(hists.fixed)
#### SAVE OUTPUTS ####
save(hists.summarized, file = paste0("../outputs/hapauto_maps/subtrees/hists.",clades[i],".summarized.RData"))
save(hists, file=paste0("../outputs/hapauto_maps/subtrees/hists.",clades[i],".RData"))
save(hists.fixed, file=paste0("../outputs/hapauto_maps/subtrees/hists.",clades[i],".fixed.RData"))
}
library(parallel)
detectCores()
nClust <- 2
# Set up clusters, print intermediates to
cl <- makeCluster(nClust, outfile = "")
registerDoSNOW(cl)
foreach(j=1:2,
.verbose = T,
.packages = c("phytools","maps","ape")) %dopar% {
save(hists, file=paste0("../outputs/hapauto_maps/subtrees/hists.",j,".RData"))
}
stopCluster(cl)
rm(cl)
#### PACKAGES ####
library(phytools)
library(evobiR)
library(devtools)
instal_github("coleoguy/devtools")
install_github("coleoguy/devtools")
install_github("coleoguy/evobiR")
#### PACKAGES ####
library(phytools)
library(evobiR)
library(coda)
source("functions.R")
clades <- c("carnivora",
"artiodactyla",
"yangochiroptera",
"anomaluromorpha_castorimorpha_myomorpha",
"primatomorpha")
#### PACKAGES ####
library(phytools)
library(evobiR)
library(coda)
source("functions.R")
clades <- c("carnivora",
"artiodactyla",
"yangochiroptera",
"anomaluromorpha_castorimorpha_myomorpha",
"primatomorpha")
load(file=paste0("../outputs/hapauto_maps/subtrees/hists.",clades[i],".summarized.RData"))
i=1
load(file=paste0("../outputs/hapauto_maps/subtrees/hists.",clades[i],".summarized.RData"))
hapauto.summarized <- hists.summarized
load(file="../outputs/SAF_maps/subtrees/hists.",clades[i],".summarized.RData")
load(file=paste0("../outputs/hapauto_maps/subtrees/hists.",clades[i],".summarized.RData"))
hapauto.summarized <- hists.summarized
load(file=paste0("../outputs/SAF_maps/subtrees/hists.",clades[i],".summarized.RData"))
SAF.summarized <- hists.summarized
rm(hists.summarized)
SAF.names <- colnames(SAF.summarized$count[,2:ncol(SAF.summarized$count)])
SAF.names
hapauto.split.names <- strsplit(hapauto.names,",")
hapauto.names <- colnames(hapauto.summarized$count[,2:ncol(hapauto.summarized$count)])
hapauto.names
SAF.names <- colnames(SAF.summarized$count[,2:ncol(SAF.summarized$count)])
hapauto.names <- colnames(hapauto.summarized$count[,2:ncol(hapauto.summarized$count)])
#Split by commas
SAF.split.names <- strsplit(SAF.names,",")
hapauto.split.names <- strsplit(hapauto.names,",")
SAF.cols <- c()
hapauto.cols <- c()
#Loop through
for(i in 1:length(hapauto.split.names)){
if(i <= length(SAF.split.names) &&
as.numeric(SAF.split.names[[i]][1]) == as.numeric(SAF.split.names[[i]][2])-1){
SAF.cols <- c(SAF.cols,i+1)
}
if(as.numeric(hapauto.split.names[[i]][1]) == as.numeric(hapauto.split.names[[i]][2])+1){
hapauto.cols <- c(hapauto.cols,i+1)
}
}
hapauto.names[hapauto.cols]
hapauto.split.names
as.numeric(hapauto.split.names[[i]][2])+1
hapauto.names[hapauto.cols]
hapauto.cols
for(j in 1:length(hapauto.split.names)){
if(j <= length(SAF.split.names) &&
as.numeric(SAF.split.names[[j]][1]) == as.numeric(SAF.split.names[[j]][2])-1){
SAF.cols <- c(SAF.cols,j+1)
}
if(as.numeric(hapauto.split.names[[j]][1]) == as.numeric(hapauto.split.names[[j]][2])+1){
hapauto.cols <- c(hapauto.cols,j+1)
}
}
SAF.cols <- c()
hapauto.cols <- c()
#Loop through
for(j in 1:length(hapauto.split.names)){
if(j <= length(SAF.split.names) &&
as.numeric(SAF.split.names[[j]][1]) == as.numeric(SAF.split.names[[j]][2])-1){
SAF.cols <- c(SAF.cols,j+1)
}
if(as.numeric(hapauto.split.names[[j]][1]) == as.numeric(hapauto.split.names[[j]][2])+1){
hapauto.cols <- c(hapauto.cols,j+1)
}
}
hapauto.cols
hapauto.split.names[[97]]
hapauto.split.names[[96]]
SAF.names[SAF.cols]
SAF.cols <- c()
hapauto.cols <- c()
#Loop through
for(j in 1:length(hapauto.split.names)){
if(j <= length(SAF.split.names) &&
as.numeric(SAF.split.names[[j]][1]) == as.numeric(SAF.split.names[[j]][2])-1){
SAF.cols <- c(SAF.cols,j)
}
if(as.numeric(hapauto.split.names[[j]][1]) == as.numeric(hapauto.split.names[[j]][2])+1){
hapauto.cols <- c(hapauto.cols,j)
}
}
View(hapauto.summarized)
SAF.names[SAF.cols]
hapauto.names[[hapauto.cols]]
hapauto.cols
hapauto.names[hapauto.cols]
SAF.counts <- rowSums(SAF.summarized$count[,SAF.cols])
total.counts <- rowSums(hapauto.summarized$count[,hapauto.cols])
#Divide
obspropSAF <- SAF.counts/(total.counts)
#### NULL SAF ####
#null proportions vector
expSA <- c()
obspropSAF
SAF.counts
total.counts
hapauto.summarized$count[,hapauto.cols]
SAF.summarized$count[,SAF.cols]
SAF.cols <- c()
hapauto.cols <- c()
#Loop through
for(j in 1:length(hapauto.split.names)){
if(j <= length(SAF.split.names) &&
as.numeric(SAF.split.names[[j]][1]) == as.numeric(SAF.split.names[[j]][2])-1){
SAF.cols <- c(SAF.cols,j+1)
}
if(as.numeric(hapauto.split.names[[j]][1]) == as.numeric(hapauto.split.names[[j]][2])+1){
hapauto.cols <- c(hapauto.cols,j+1)
}
}
rowSums(SAF.summarized$count[,SAF.cols])
rowSums(hapauto.summarized$count[,hapauto.cols])
SAF.counts <- rowSums(SAF.summarized$count[,SAF.cols])
total.counts <- rowSums(hapauto.summarized$count[,hapauto.cols])
obspropSAF <- SAF.counts/(total.counts)
obspropSAF
expSA <- c()
for(k in 1:length(times)){
#convert state to diploid autosome
Da <- (k + 1) * 2
#Calculate proportion SAF
expSA.cur[k] <- Pfsa2(Da = Da,
scs = "XY",
mud = 0.5) * times[k]
names(expSA.cur)[k] <- Da
}
for(j in 1:100){
#print iterations
print(paste0("Tree ",j))
#get current times
times <- hapauto.summarized$times[j,1:(ncol(hapauto.summarized$times) - 1)]/
hapauto.summarized$times[j,ncol(hapauto.summarized$times)]
#vector for current map proportions
expSA.cur <- c()
#loop through states
for(k in 1:length(times)){
#convert state to diploid autosome
Da <- (k + 1) * 2
#Calculate proportion SAF
expSA.cur[k] <- Pfsa2(Da = Da,
scs = "XY",
mud = 0.5) * times[k]
names(expSA.cur)[k] <- Da
}
expSA[k] <- sum(expSA.cur)
}
expSA
expSA <- c()
for(j in 1:100){
#print iterations
print(paste0("Tree ",j))
#get current times
times <- hapauto.summarized$times[j,1:(ncol(hapauto.summarized$times) - 1)]/
hapauto.summarized$times[j,ncol(hapauto.summarized$times)]
#vector for current map proportions
expSA.cur <- c()
#loop through states
for(k in 1:length(times)){
#convert state to diploid autosome
Da <- (k + 1) * 2
#Calculate proportion SAF
expSA.cur[k] <- Pfsa2(Da = Da,
scs = "XY",
mud = 0.5) * times[k]
names(expSA.cur)[k] <- Da
}
expSA[j] <- sum(expSA.cur)
}
expSA
#Dataframe for raw proportions
raw.props <- as.data.frame(matrix(NA,
nrow=200,
ncol=2,
byrow = F))
colnames(raw.props) <- c("proportion","category")
raw.props[1:100,] <- cbind(obspropSAF,
rep("Observed",100))
raw.props[101:200,] <- cbind(expSA,
rep("Null",100))
#Dataframe for results
hpd.intervals <- as.data.frame(matrix(NA,
nrow=4,
ncol=3,
byrow = F))
colnames(hpd.intervals) <- c("x",
"y",
"category")
hpd.intervals$category <- c(rep("Observed",2),
rep("Null",2))
hpd.intervals$y <- c(rep(-25,2),
rep(-50,2))
hpd.intervals$x <- c(HPDinterval(as.mcmc(obspropSAF)),
HPDinterval(as.mcmc(expSA)))
#### PACKAGES ####
library(phytools)
library(evobiR)
library(coda)
source("functions.R")
clades <- c("carnivora",
"artiodactyla",
"yangochiroptera",
"anomaluromorpha_castorimorpha_myomorpha",
"primatomorpha")
#### LOOP THROUGH
for(i in 1:5){
load(file=paste0("../outputs/hapauto_maps/subtrees/hists.",clades[i],".summarized.RData"))
hapauto.summarized <- hists.summarized
load(file=paste0("../outputs/SAF_maps/subtrees/hists.",clades[i],".summarized.RData"))
SAF.summarized <- hists.summarized
rm(hists.summarized)
#### EXTRACT OBSERVED TRANSITIONS ####
#get column names
SAF.names <- colnames(SAF.summarized$count[,2:ncol(SAF.summarized$count)])
hapauto.names <- colnames(hapauto.summarized$count[,2:ncol(hapauto.summarized$count)])
#Split by commas
SAF.split.names <- strsplit(SAF.names,",")
hapauto.split.names <- strsplit(hapauto.names,",")
#Create vectors of rows
SAF.cols <- c()
hapauto.cols <- c()
#Loop through
for(j in 1:length(hapauto.split.names)){
if(j <= length(SAF.split.names) &&
as.numeric(SAF.split.names[[j]][1]) == as.numeric(SAF.split.names[[j]][2])-1){
SAF.cols <- c(SAF.cols,j+1)
}
if(as.numeric(hapauto.split.names[[j]][1]) == as.numeric(hapauto.split.names[[j]][2])+1){
hapauto.cols <- c(hapauto.cols,j+1)
}
}
#### SUM SAF AND AA COUNTS ####
#Get rowSums
SAF.counts <- rowSums(SAF.summarized$count[,SAF.cols])
total.counts <- rowSums(hapauto.summarized$count[,hapauto.cols])
#Divide
obspropSAF <- SAF.counts/(total.counts)
#### NULL SAF ####
#null proportions vector
expSA <- c()
for(j in 1:100){
#print iterations
print(paste0("Tree ",j))
#get current times
times <- hapauto.summarized$times[j,1:(ncol(hapauto.summarized$times) - 1)]/
hapauto.summarized$times[j,ncol(hapauto.summarized$times)]
#vector for current map proportions
expSA.cur <- c()
#loop through states
for(k in 1:length(times)){
#convert state to diploid autosome
Da <- (k + 1) * 2
#Calculate proportion SAF
expSA.cur[k] <- Pfsa2(Da = Da,
scs = "XY",
mud = 0.5) * times[k]
names(expSA.cur)[k] <- Da
}
expSA[j] <- sum(expSA.cur)
}
#### SUMMARIZE AND SAVE ####
#Dataframe for raw proportions
raw.props <- as.data.frame(matrix(NA,
nrow=200,
ncol=2,
byrow = F))
colnames(raw.props) <- c("proportion","category")
raw.props[1:100,] <- cbind(obspropSAF,
rep("Observed",100))
raw.props[101:200,] <- cbind(expSA,
rep("Null",100))
#Dataframe for results
hpd.intervals <- as.data.frame(matrix(NA,
nrow=4,
ncol=3,
byrow = F))
colnames(hpd.intervals) <- c("x",
"y",
"category")
hpd.intervals$category <- c(rep("Observed",2),
rep("Null",2))
hpd.intervals$y <- c(rep(-25,2),
rep(-50,2))
hpd.intervals$x <- c(HPDinterval(as.mcmc(obspropSAF)),
HPDinterval(as.mcmc(expSA)))
write.csv(hpd.intervals,
paste0("../outputs/subtrees/HPD_",clades[i],"_intervals.csv"),
quote=F,
row.names=T)
write.csv(raw.props,
paste0("../outputs/subtrees/proportions_",clades[i],"_raw.csv"),
quote=F,
row.names=T)
}
i=1
#### PACKAGES ####
library(ggplot2)
#### SET UP CLADES AND THEME ####
clades <- c("carnivora",
"artiodactyla",
"yangochiroptera",
"anomaluromorpha_castorimorpha_myomorpha",
"primatomorpha")
#basic density theme
theme_density <- theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background= element_blank(),
axis.line = element_line(colour = "black"),
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
axis.title = element_text(face = "bold",
size = 15),
legend.title = element_blank(),
plot.title = element_text(face = "bold",
size = 17,
hjust=0.5))
i=1
hpd.intervals <- read.csv(paste0("../outputs/subtrees/HPD_",clades[i],"_intervals.csv"))[,-1]
raw.dat <- read.csv(paste0("../outputs/subtrees/proportions_",clades[i],"_raw.csv"))[,-1]
View(raw.dat)
View(raw.dat)
SAF.overlap <- ggplot()+
geom_density(aes(x=raw.dat$proportion,fill=raw.dat$category),
alpha=0.5)+
geom_line(mapping=aes(x=hpd.intervals$x,y=hpd.intervals$y,
color=hpd.intervals$category),
show.legend = F)+
scale_y_continuous("Density")+
scale_fill_viridis_d()+
scale_color_viridis_d()+
xlab("Proportion SAF")+
theme_density
plot(SAF.overlap)
View(hpd.intervals)
#### PACKAGES ####
library(ggplot2)
#### SET UP CLADES AND THEME ####
clades <- c("carnivora",
"artiodactyla",
"yangochiroptera",
"anomaluromorpha_castorimorpha_myomorpha",
"primatomorpha")
#basic density theme
theme_density <- theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background= element_blank(),
axis.line = element_line(colour = "black"),
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
axis.title = element_text(face = "bold",
size = 15),
legend.title = element_blank(),
plot.title = element_text(face = "bold",
size = 17,
hjust=0.5))
for(i in 1:5){
#### LOAD DATA ####
hpd.intervals <- read.csv(paste0("../outputs/subtrees/HPD_",clades[i],"_intervals.csv"))[,-1]
raw.dat <- read.csv(paste0("../outputs/subtrees/proportions_",clades[i],"_raw.csv"))[,-1]
#### PLOT ####
SAF.overlap <- ggplot()+
geom_density(aes(x=raw.dat$proportion,fill=raw.dat$category),
alpha=0.5)+
geom_line(mapping=aes(x=hpd.intervals$x,y=hpd.intervals$y,
color=hpd.intervals$category),
show.legend = F)+
scale_y_continuous("Density")+
scale_fill_viridis_d()+
scale_color_viridis_d()+
xlab("Proportion SAF")+
theme_density
plot(SAF.overlap)
#### SAVE PLOT ####
ggsave(SAF.overlap,
filename = paste0("../figures/observed_null_overlap_",clades[i],".pdf"),
width = 7,
height = 7,
units = "in")
}
#### PACKAGES ####
library(ggplot2)
#### SET UP CLADES AND THEME ####
clades <- c("carnivora",
"artiodactyla",
"yangochiroptera",
"anomaluromorpha_castorimorpha_myomorpha",
"primatomorpha")
#basic density theme
theme_density <- theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background= element_blank(),
axis.line = element_line(colour = "black"),
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
axis.title = element_text(face = "bold",
size = 15),
legend.title = element_blank(),
plot.title = element_text(face = "bold",
size = 17,
hjust=0.5))
for(i in 1:5){
#### LOAD DATA ####
hpd.intervals <- read.csv(paste0("../outputs/subtrees/HPD_",clades[i],"_intervals.csv"))[,-1]
raw.dat <- read.csv(paste0("../outputs/subtrees/proportions_",clades[i],"_raw.csv"))[,-1]
#### PLOT ####
SAF.overlap <- ggplot()+
geom_density(aes(x=raw.dat$proportion,fill=raw.dat$category),
alpha=0.5)+
geom_line(mapping=aes(x=hpd.intervals$x,y=hpd.intervals$y,
color=hpd.intervals$category),
show.legend = F)+
scale_y_continuous("Density")+
scale_fill_viridis_d()+
scale_color_viridis_d()+
xlab("Proportion SAF")+
labs(subtitle = paste0(clades[i]))+
theme_density
plot(SAF.overlap)
#### SAVE PLOT ####
ggsave(SAF.overlap,
filename = paste0("../figures/observed_null_overlap_",clades[i],".pdf"),
width = 7,
height = 7,
units = "in")
}
dat <- read.csv("../data/chromes/dat.csv",
as.is=T)[
dat <- read.csv("../data/chromes/dat.csv",
as.is=T)[
dat <- read.csv("../data/chromes/dat.csv",
as.is=T)
View(dat)
#### LOAD PACKAGES ####
library(phytools)
library(chromePlus)
library(diversitree)
#### LOAD DATA ####
dat <- read.csv("../data/chromes/dat.csv",
as.is=T)[,c(1,3)]
tree <- force.ultrametric(read.nexus("../data/trees/tree.nex"))
tree <- force.ultrametric(read.tree("../data/trees/tree.nex"))
dat <- dat[which(dat$tree.name %in% tree$tip.label),]
data.matrix <- datatoMatrix(dat,
c(2,50),
hyper = F)
#Make mkn model
model <- make.mkn(tree,
data.matrix,
ncol(data.matrix),
strict=F,
control=list(method="ode"))
#constrain model
model.con <- constrainMkn(data.matrix,
model,
hyper = F,
polyploidy = F,
verbose = T,
constrain = list(drop.poly=T,
drop.demi=T))
#run MCMC
model.mcmc <- diversitree::mcmc(lik=model.con$`likelihood function`,
x.init=c(1,1),
prior=make.prior.exponential(r=10),
#upper=c(100,100,100,100),
nsteps = 500,
w=1)
#### LOAD PACKAGES ####
library(phytools)
library(chromePlus)
library(diversitree)
#### LOAD DATA ####
dat <- read.csv("../data/chromes/dat.csv",
as.is=T)[,c(1,3)]
tree <- force.ultrametric(read.nexus("../data/trees/cut.tree.nex"))
